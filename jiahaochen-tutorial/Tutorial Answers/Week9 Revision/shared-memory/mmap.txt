在linux系统开发当中，时常需要在多个进程之间交换数据，在多个进程之间交换数据，有很多方法，但最高效的方法莫过于共享内存。

　　linux共享内存是通过tmpfs这个文件系统来实现的，tmpfs文件系的目录为/dev/shm，/dev/shm是驻留在内存 RAM 当中的，因此读写速度与读写内存速度一样，/dev/shm的容量默认尺寸为系统内存大小的一半大小，使用df -h命令可以看到。但实际上它并不会真正的占用这块内存，如果/dev/shm/下没有任何文件，它占用的内存实际上就是0字节，仅在使用shm_open文件时，/dev/shm才会真正占用内存。

在Linux系统使用共享内存，一般用到以下几个函数：

int shm_open(const char *name, int oflag, mode_t mode);
void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);
int munmap(void *addr, size_t length);
int shm_unlink(const char *name);
int ftruncate(int fd, off_t length);
int shm_open(const char *name, int oflag, mode_t mode);

功能说明：shm_open　用于创建或者打开共享内存文件。笔者认为shm_open 也许仅仅是系统函数open的一个包装，不同之处就是shm_open操作的文件一定是位于tmpfs文件系统里的，常见的Linux发布版的tmpfs文件系统的存放目录就是/dev/shm。

返回值:成功返回fd>0，  失败返回fd<0

参数说明：

name：要打开或创建的共享内存文件名，由于shm_open　打开或操作的文件都是位于/dev/shm目录的，因此name不能带路径，例如：/var/myshare 这样的名称是错误的，而 myshare 是正确的，因为 myshare 不带任何路径。如果你一定要在name添加路径，那么，请在/dev/shm目录里创建一个目录，例如，如果你想创建一个  bill/myshare 的共享内存文件，那么请先在/dev/shm目录里创建 bill这个子目录，由于不同厂家发布的linux系统的tmpfs的位置也许不是/dev/shm，因此带路径的名称也许在别的环境下打开不成功。

oflag：打开的文件操作属性：O_CREAT、O_RDWR、O_EXCL的按位或运算组合

mode：文件共享模式，例如 0777

------------------------------------------------------------------------------------------------------------------

void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);

功能说明: 将打开的文件映射到内存，一般是将shm_open打开的文件映射到内存，当然也可以将硬盘上的用open函数打开的文件映射到内存。这个函数只是将文件映射到内存中，使得我们用操作内存指针的方式来操作文件数据。

参数说明：

addr：要将文件映射到的内存地址，一般应该传递NULL来由Linux内核指定。

length：要映射的文件数据长度。

prot：映射的内存区域的操作权限（保护属性），包括PROT_READ、PROT_WRITE、PROT_READ|PROT_WRITE

flags：标志位参数，包括：MAP_SHARED、MAP_PRIVATE与MAP_ANONYMOUS。
            MAP_SHARED:  建立共享，用于进程间通信，如果没有这个标志，则别的进程即使能打开文件，也看不到数据。
            MAP_PRIVATE: 只有进程自己用的内存区域
            MAP_ANONYMOUS:匿名映射区

fd：   用来建立映射区的文件描述符，用 shm_open打开或者open打开的文件。

offset：映射文件相对于文件头的偏移位置，应该按4096字节对齐。

返回值:成功返回映射的内存地址指针，可以用这个地址指针对映射的文件内容进行读写操作，读写文件数据如同操作内存一样；如果 失败则返回NULL。

------------------------------------------------------------------------------------------------------------------

int munmap(void *addr, size_t length);

功能说明: 取消内存映射，addr是由mmap成功返回的地址，length是要取消的内存长度，munmap 只是将映射的内存从进程的地址空间撤销，如果不调用这个函数，则在进程终止前，该片区域将得不到释放。

----------------------------------------------------------------------------------------------------------------------

int shm_unlink(const char *name);

功能说明：删除/dev/shm目录的文件，shm_unlink 删除的文件是由shm_open函数创建于/dev/shm目录的。可以用系统函数unlink来达到同样的效果，用/dev/shm + name 组成完整的路径即可，但一般不要这么做，因为系统的tmpfs的位置也许不是/dev/shm。用shm_open　创建的文件，如果不调用此函数删除，会一直存在于/dev/shm目录里，直到操作系统重启或者调用linux命令rm来删除为止。

------------------------------------------------------------------------------------------------------------

int ftruncate(int fd, off_t length);

功能说明：重置文件大小。任何open打开的文件都可以用这个函数，不限于shm_open打开的文件。

好了，以下是共享内存操作的实践代码：


————————————————
版权声明：本文为CSDN博主「大飞飞鱼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/ababab12345/article/details/102931841
